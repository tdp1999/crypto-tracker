{
    "info": {
        "_postman_id": "d5b9a4c6-8e1d-4fc7-b53a-1e5f7a3c9d8e",
        "name": "App",
        "description": "Tests for App API endpoints",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Site Health Check",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response is 'OK'\", function () {",
                            "    pm.expect(pm.response.text()).to.equal('OK');",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{DOMAIN}}/site-health",
                    "host": ["{{DOMAIN}}"],
                    "path": ["site-health"]
                },
                "description": "Health check endpoint to verify API is running (public endpoint)"
            },
            "response": []
        },
        {
            "name": "Register and Get Auth Token",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.collectionVariables.set('app_test_email', pm.collectionVariables.get('auth_test_email'));",
                            "pm.collectionVariables.set('app_test_password', pm.collectionVariables.get('auth_test_password'));"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// Generate unique test email to avoid conflicts",
                            "const testEmail = `test.app.${Date.now()}@example.com`;",
                            "const testPassword = \"Password123!\";",
                            "",
                            "pm.collectionVariables.set('auth_test_email', testEmail);",
                            "pm.collectionVariables.set('auth_test_password', testPassword);"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"email\": \"{{auth_test_email}}\",\n    \"password\": \"{{auth_test_password}}\"\n}"
                },
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/auth/register",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "auth", "register"]
                },
                "description": "Register a new user to get auth token for protected endpoints"
            },
            "response": []
        },
        {
            "name": "Login User",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"Response has access token\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('data');",
                            "    pm.expect(jsonData.data).to.have.property('accessToken');",
                            "    ",
                            "    // Store token for subsequent requests",
                            "    pm.collectionVariables.set('app_access_token', jsonData.data.accessToken);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"email\": \"{{auth_test_email}}\",\n    \"password\": \"{{auth_test_password}}\"\n}"
                },
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/auth/login",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "auth", "login"]
                },
                "description": "Login to get an authentication token"
            },
            "response": []
        },
        {
            "name": "Random Number",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response contains a number\", function () {",
                            "    const responseText = pm.response.text();",
                            "    pm.expect(responseText).to.not.be.empty;",
                            "    ",
                            "    const parsedNumber = parseFloat(responseText);",
                            "    pm.expect(parsedNumber).to.be.a('number');",
                            "    pm.expect(isNaN(parsedNumber)).to.be.false;",
                            "});",
                            "",
                            "pm.test(\"Random number is between 0 and 1\", function () {",
                            "    const parsedNumber = parseFloat(pm.response.text());",
                            "    pm.expect(parsedNumber).to.be.within(0, 1);",
                            "});",
                            "",
                            "// Clean up variables",
                            "pm.test(\"Cleanup test data\", function () {",
                            "    pm.collectionVariables.unset('auth_test_email');",
                            "    pm.collectionVariables.unset('auth_test_password');",
                            "    pm.collectionVariables.unset('app_test_email');",
                            "    pm.collectionVariables.unset('app_test_password');",
                            "    pm.collectionVariables.unset('app_access_token');",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{app_access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{DOMAIN}}/random-number",
                    "host": ["{{DOMAIN}}"],
                    "path": ["random-number"]
                },
                "description": "Get a random number between 0 and 1 (protected endpoint)"
            },
            "response": []
        },
        {
            "name": "(Failed) Random Number Without Auth",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 401 for unauthorized access\", function () {",
                            "    pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"Error response has correct structure\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('statusCode');",
                            "    pm.expect(jsonData).to.have.property('message');",
                            "    pm.expect(jsonData.statusCode).to.eql(401);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{DOMAIN}}/random-number",
                    "host": ["{{DOMAIN}}"],
                    "path": ["random-number"]
                },
                "description": "Test unauthorized access to protected endpoint"
            },
            "response": []
        }
    ]
}
