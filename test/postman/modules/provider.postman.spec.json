{
    "info": {
        "_postman_id": "f8a05e3c-5d1a-4b91-8c3e-6c9e0b6f5f7e",
        "name": "Provider",
        "description": "Tests for Crypto Provider API endpoints",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Register and Get Auth Token",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.collectionVariables.set('provider_test_email', pm.collectionVariables.get('auth_test_email'));",
                            "pm.collectionVariables.set('provider_test_password', pm.collectionVariables.get('auth_test_password'));"
                        ],
                        "type": "text/javascript"
                    }
                },
                {
                    "listen": "prerequest",
                    "script": {
                        "exec": [
                            "// Generate unique test email to avoid conflicts",
                            "const testEmail = `test.provider.${Date.now()}@example.com`;",
                            "const testPassword = \"Password123!\";",
                            "",
                            "pm.collectionVariables.set('auth_test_email', testEmail);",
                            "pm.collectionVariables.set('auth_test_password', testPassword);"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"email\": \"{{auth_test_email}}\",\n    \"password\": \"{{auth_test_password}}\"\n}"
                },
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/auth/register",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "auth", "register"]
                },
                "description": "Register a new user to get auth token for protected endpoints"
            },
            "response": []
        },
        {
            "name": "Login User",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"Response has access token\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('data');",
                            "    pm.expect(jsonData.data).to.have.property('accessToken');",
                            "    ",
                            "    // Store token for subsequent requests",
                            "    pm.collectionVariables.set('provider_access_token', jsonData.data.accessToken);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"email\": \"{{auth_test_email}}\",\n    \"password\": \"{{auth_test_password}}\"\n}"
                },
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/auth/login",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "auth", "login"]
                },
                "description": "Login to get an authentication token"
            },
            "response": []
        },
        {
            "name": "Ping",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response time is less than 500ms\", function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(500);",
                            "});",
                            "",
                            "pm.test(\"Response is valid JSON\", function () {",
                            "    pm.response.to.be.json;",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{provider_access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/ping",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "provider", "ping"]
                },
                "description": "Health check for the provider service"
            },
            "response": []
        },
        {
            "name": "Search",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response has data property\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('data');",
                            "});",
                            "",
                            "pm.test(\"Response is an array\", function () {",
                            "    var jsonData = pm.response.json().data;",
                            "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                            "});",
                            "",
                            "pm.test(\"Assets have correct structure\", function () {",
                            "    var jsonData = pm.response.json().data;",
                            "    ",
                            "    if (jsonData.length > 0) {",
                            "        pm.expect(jsonData[0]).to.have.property('id');",
                            "        pm.expect(jsonData[0]).to.have.property('symbol');",
                            "        pm.expect(jsonData[0]).to.have.property('name');",
                            "    }",
                            "});",
                            "",
                            "pm.test(\"Search parameter is working\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    var searchKey = pm.request.url.query.get(\"key\").toLowerCase();",
                            "    ",
                            "    if (jsonData.length > 0) {",
                            "        // Check if at least one result contains the search term in name, symbol or id",
                            "        var matchFound = jsonData.some(function(asset) {",
                            "            return asset.name.toLowerCase().includes(searchKey) || ",
                            "                   asset.symbol.toLowerCase().includes(searchKey) ||",
                            "                   asset.id.toLowerCase().includes(searchKey);",
                            "        });",
                            "        ",
                            "        pm.expect(matchFound).to.be.true;",
                            "    }",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{provider_access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/search?key=bitcoin",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "provider", "search"],
                    "query": [
                        {
                            "key": "key",
                            "value": "bitcoin",
                            "description": "Search keyword"
                        }
                    ]
                },
                "description": "Search for crypto assets by keyword"
            },
            "response": []
        },
        {
            "name": "(Failed) Search With Empty Keys",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 400 for empty key\", function () {",
                            "    pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"Error response has correct structure\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('statusCode');",
                            "    pm.expect(jsonData).to.have.property('message');",
                            "    pm.expect(jsonData.statusCode).to.eql(400);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{provider_access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/search?key=",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "provider", "search"],
                    "query": [
                        {
                            "key": "key",
                            "value": "",
                            "description": "Empty search keyword"
                        }
                    ]
                },
                "description": "Test validation for empty search key"
            },
            "response": []
        },
        {
            "name": "Get Price",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response has data property\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('data');",
                            "});",
                            "",
                            "pm.test(\"Data is an array\", function () {",
                            "    var jsonData = pm.response.json().data;",
                            "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                            "});",
                            "",
                            "pm.test(\"Prices have correct structure\", function () {",
                            "    var jsonData = pm.response.json().data;",
                            "    ",
                            "    if (jsonData.length > 0) {",
                            "        pm.expect(jsonData[0]).to.have.property('id');",
                            "        pm.expect(jsonData[0]).to.have.property('price');",
                            "        pm.expect(jsonData[0]).to.have.property('marketCap');",
                            "        pm.expect(jsonData[0]).to.have.property('volumn24h');",
                            "        pm.expect(jsonData[0]).to.have.property('percentChange24h');",
                            "        pm.expect(jsonData[0]).to.have.property('lastUpdated');",
                            "    }",
                            "});",
                            "",
                            "pm.test(\"Price data types are correct\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    ",
                            "    if (jsonData.length > 0) {",
                            "        pm.expect(jsonData[0].id).to.be.a('string');",
                            "        pm.expect(jsonData[0].price).to.be.a('number');",
                            "        pm.expect(jsonData[0].marketCap).to.be.a('number');",
                            "        pm.expect(jsonData[0].volumn24h).to.be.a('number');",
                            "        pm.expect(jsonData[0].percentChange24h).to.be.a('number');",
                            "    }",
                            "});",
                            "",
                            "pm.test(\"IDs parameter is working\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    var idsParam = pm.request.url.query.get(\"ids\");",
                            "    var requestedIds = idsParam.split(',').map(id => id.trim().toLowerCase());",
                            "    ",
                            "    if (jsonData.length > 0 && requestedIds.length > 0) {",
                            "        // Check that we received at least one of the requested IDs",
                            "        var matchFound = jsonData.some(function(price) {",
                            "            return requestedIds.includes(price.id.toLowerCase());",
                            "        });",
                            "        ",
                            "        pm.expect(matchFound).to.be.true;",
                            "    }",
                            "});",
                            "",
                            "// Reset any test flags",
                            "pm.variables.set('skipArrayValidation', false);"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{provider_access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/price?ids=bitcoin,ethereum",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "provider", "price"],
                    "query": [
                        {
                            "key": "ids",
                            "value": "bitcoin,ethereum",
                            "description": "Comma-separated crypto asset IDs"
                        }
                    ]
                },
                "description": "Get price information for specified crypto assets"
            },
            "response": []
        },
        {
            "name": "(Failed) Get Price With Invalid IDs",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 400 for invalid ids\", function () {",
                            "    pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"Error response has correct structure\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('statusCode');",
                            "    pm.expect(jsonData).to.have.property('error');",
                            "    pm.expect(jsonData).to.have.property('message');",
                            "    pm.expect(jsonData.statusCode).to.eql(400);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{provider_access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/price?ids=,,,",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "provider", "price"],
                    "query": [
                        {
                            "key": "ids",
                            "value": ",,,",
                            "description": "Invalid comma-separated IDs"
                        }
                    ]
                },
                "description": "Test validation for invalid IDs format"
            },
            "response": []
        },
        {
            "name": "(Failed) Ping Without Auth",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "pm.test(\"Status code is 401 for unauthorized access\", function () {",
                            "    pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"Error response has correct structure\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.have.property('statusCode');",
                            "    pm.expect(jsonData).to.have.property('message');",
                            "    pm.expect(jsonData.statusCode).to.eql(401);",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/ping",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "provider", "ping"]
                },
                "description": "Test unauthorized access to protected endpoint"
            },
            "response": []
        },
        {
            "name": "Cleanup Variables",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "exec": [
                            "// Clean up test data by removing collection variables",
                            "pm.test(\"Cleanup test data\", function () {",
                            "    pm.collectionVariables.unset('auth_test_email');",
                            "    pm.collectionVariables.unset('auth_test_password');",
                            "    pm.collectionVariables.unset('provider_test_email');",
                            "    pm.collectionVariables.unset('provider_test_password');",
                            "    pm.collectionVariables.unset('provider_access_token');",
                            "    pm.expect(true).to.be.true;",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "request": {
                "method": "GET",
                "header": [
                    {
                        "key": "Authorization",
                        "value": "Bearer {{provider_access_token}}"
                    }
                ],
                "url": {
                    "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/ping",
                    "host": ["{{DOMAIN}}"],
                    "path": ["{{API_PREFIX}}", "provider", "ping"]
                },
                "description": "Cleanup test variables"
            },
            "response": []
        }
    ]
}
