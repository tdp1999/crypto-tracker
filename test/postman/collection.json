{
  "info": {
    "_postman_id": "e5f2c8b1-7a93-4e2c-9d8e-f1c6d5b4a3e2",
    "name": "Crypto Tracker",
    "description": "Complete collection for Crypto Tracker API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Provider",
      "item": [
        {
          "name": "Ping",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 500ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test(\"Response is valid JSON\", function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/ping",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "provider",
                "ping"
              ]
            },
            "description": "Health check for the provider service"
          },
          "response": []
        },
        {
          "name": "Search",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json().data;",
                  "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Assets have correct structure\", function () {",
                  "    var jsonData = pm.response.json().data;",
                  "    ",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('symbol');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Search parameter is working\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var searchKey = pm.request.url.query.get(\"key\").toLowerCase();",
                  "    ",
                  "    if (jsonData.length > 0) {",
                  "        // Check if at least one result contains the search term in name, symbol or id",
                  "        var matchFound = jsonData.some(function(asset) {",
                  "            return asset.name.toLowerCase().includes(searchKey) || ",
                  "                   asset.symbol.toLowerCase().includes(searchKey) ||",
                  "                   asset.id.toLowerCase().includes(searchKey);",
                  "        });",
                  "        ",
                  "        pm.expect(matchFound).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/search?key=bitcoin",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "provider",
                "search"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "bitcoin",
                  "description": "Search keyword"
                }
              ]
            },
            "description": "Search for crypto assets by keyword"
          },
          "response": []
        },
        {
          "name": "(Failed) Search With Empty Keys",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for empty key\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.statusCode).to.eql(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/search?key=",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "provider",
                "search"
              ],
              "query": [
                {
                  "key": "key",
                  "value": "",
                  "description": "Empty search keyword"
                }
              ]
            },
            "description": "Test validation for empty search key"
          },
          "response": []
        },
        {
          "name": "Get Price",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test(\"Data is an array\", function () {",
                  "    var jsonData = pm.response.json().data;",
                  "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Prices have correct structure\", function () {",
                  "    var jsonData = pm.response.json().data;",
                  "    ",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('price');",
                  "        pm.expect(jsonData[0]).to.have.property('marketCap');",
                  "        pm.expect(jsonData[0]).to.have.property('volumn24h');",
                  "        pm.expect(jsonData[0]).to.have.property('percentChange24h');",
                  "        pm.expect(jsonData[0]).to.have.property('lastUpdated');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Price data types are correct\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    ",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0].id).to.be.a('string');",
                  "        pm.expect(jsonData[0].price).to.be.a('number');",
                  "        pm.expect(jsonData[0].marketCap).to.be.a('number');",
                  "        pm.expect(jsonData[0].volumn24h).to.be.a('number');",
                  "        pm.expect(jsonData[0].percentChange24h).to.be.a('number');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"IDs parameter is working\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var idsParam = pm.request.url.query.get(\"ids\");",
                  "    var requestedIds = idsParam.split(',').map(id => id.trim().toLowerCase());",
                  "    ",
                  "    if (jsonData.length > 0 && requestedIds.length > 0) {",
                  "        // Check that we received at least one of the requested IDs",
                  "        var matchFound = jsonData.some(function(price) {",
                  "            return requestedIds.includes(price.id.toLowerCase());",
                  "        });",
                  "        ",
                  "        pm.expect(matchFound).to.be.true;",
                  "    }",
                  "});",
                  "",
                  "// Reset any test flags",
                  "pm.variables.set('skipArrayValidation', false);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/price?ids=bitcoin,ethereum",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "provider",
                "price"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": "bitcoin,ethereum",
                  "description": "Comma-separated crypto asset IDs"
                }
              ]
            },
            "description": "Get price information for specified crypto assets"
          },
          "response": []
        },
        {
          "name": "(Failed) Get Price With Invalid IDs",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for invalid ids\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode');",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.statusCode).to.eql(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/provider/price?ids=,,,",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "provider",
                "price"
              ],
              "query": [
                {
                  "key": "ids",
                  "value": ",,,",
                  "description": "Invalid comma-separated IDs"
                }
              ]
            },
            "description": "Test validation for invalid IDs format"
          },
          "response": []
        }
      ],
      "description": "Tests for Crypto Provider API endpoints"
    },
    {
      "name": "User",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has data property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test(\"Response contains ID of created user\", function () {",
                  "    var jsonData = pm.response.json().data;",
                  "    pm.expect(jsonData).to.be.a('string');",
                  "    ",
                  "    // Store user ID for later tests",
                  "    pm.collectionVariables.set('created_user_id', jsonData);",
                  "});",
                  "",
                  "pm.test(\"Created user ID is in UUID format\", function () {",
                  "    var userId = pm.response.json().data;",
                  "    pm.expect(userId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique test email to avoid conflicts",
                  "const testEmail = `test.user.${Date.now()}@example.com`;",
                  "pm.collectionVariables.set('test_email', testEmail);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test_email}}\",\n    \"rawPassword\": \"Password123!\",\n    \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users"
              ]
            },
            "description": "Create a new user"
          },
          "response": []
        },
        {
          "name": "(Failed) Create User with Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for invalid user data\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode');",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.statusCode).to.eql(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"invalid-email\",\n    \"status\": \"invalid-status\"\n}"
            },
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users"
              ]
            },
            "description": "Test validation for invalid user data"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test(\"User has correct structure\", function () {",
                  "    var userData = pm.response.json().data;",
                  "    pm.expect(userData).to.have.property('id');",
                  "    pm.expect(userData).to.have.property('email');",
                  "    pm.expect(userData).to.have.property('status');",
                  "    pm.expect(userData).to.have.property('createdAt');",
                  "    pm.expect(userData).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test(\"User ID matches request\", function () {",
                  "    var userData = pm.response.json().data;",
                  "    var requestId = pm.request.url.path[pm.request.url.path.length - 1];",
                  "    pm.expect(userData.id).to.eql(requestId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users/{{created_user_id}}",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users",
                "{{created_user_id}}"
              ]
            },
            "description": "Get a single user by ID"
          },
          "response": []
        },
        {
          "name": "(Failed) Get User with Invalid ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a valid UUID for testing",
                  "function generateUUID() {",
                  "    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);",
                  "        return v.toString(16);",
                  "    });",
                  "}",
                  "",
                  "// Create an invalid ID by adding suffix to a valid UUID",
                  "const invalidId = generateUUID();",
                  "pm.collectionVariables.set('invalid_user_id', invalidId);",
                  "console.log('Created invalid ID for testing:', invalidId);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 for non-existent user\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode');",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.statusCode).to.eql(404);",
                  "});",
                  "",
                  "// Clean up the test variable",
                  "pm.collectionVariables.unset('invalid_user_id');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users/{{invalid_user_id}}",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users",
                "{{invalid_user_id}}"
              ]
            },
            "description": "Test error handling for invalid user ID"
          },
          "response": []
        },
        {
          "name": "List Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test(\"Response has pagination structure\", function () {",
                  "    var jsonData = pm.response.json().data;",
                  "    pm.expect(jsonData).to.have.property('items');",
                  "    pm.expect(jsonData).to.have.property('meta');",
                  "    pm.expect(jsonData.meta).to.have.property('page');",
                  "    pm.expect(jsonData.meta).to.have.property('limit');",
                  "    pm.expect(jsonData.meta).to.have.property('totalItems');",
                  "    pm.expect(jsonData.meta).to.have.property('totalPages');",
                  "    pm.expect(jsonData.meta).to.have.property('hasNextPage');",
                  "    pm.expect(jsonData.meta).to.have.property('hasPreviousPage');",
                  "});",
                  "",
                  "pm.test(\"Items is an array\", function () {",
                  "    var jsonData = pm.response.json().data;",
                  "    pm.expect(Array.isArray(jsonData.items)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Users have correct structure\", function () {",
                  "    var jsonData = pm.response.json().data;",
                  "    ",
                  "    if (jsonData.items.length > 0) {",
                  "        pm.expect(jsonData.items[0]).to.have.property('id');",
                  "        pm.expect(jsonData.items[0]).to.have.property('email');",
                  "        pm.expect(jsonData.items[0]).to.have.property('status');",
                  "        pm.expect(jsonData.items[0]).to.have.property('createdAt');",
                  "        pm.expect(jsonData.items[0]).to.have.property('updatedAt');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users?page=1&limit=10",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page"
                }
              ]
            },
            "description": "Get a list of all users with pagination"
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test(\"Update operation returned success\", function () {",
                  "    var success = pm.response.json().data;",
                  "    pm.expect(success).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"inactive\"\n}"
            },
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users/{{created_user_id}}",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users",
                "{{created_user_id}}"
              ]
            },
            "description": "Update a user's information"
          },
          "response": []
        },
        {
          "name": "(Failed) Update User with Invalid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for invalid update data\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode');",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.statusCode).to.eql(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"status\": \"invalid-status\"\n}"
            },
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users/{{created_user_id}}",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users",
                "{{created_user_id}}"
              ]
            },
            "description": "Test validation for invalid update data"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has data property\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});",
                  "",
                  "pm.test(\"Delete operation returned success\", function () {",
                  "    var success = pm.response.json().data;",
                  "    pm.expect(success).to.be.true;",
                  "});",
                  "",
                  "// Clean up test data by removing collection variables",
                  "pm.test(\"Cleanup test data\", function () {",
                  "    pm.collectionVariables.unset('created_user_id');",
                  "    pm.collectionVariables.unset('test_email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users/{{created_user_id}}",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users",
                "{{created_user_id}}"
              ]
            },
            "description": "Delete a user by ID"
          },
          "response": []
        },
        {
          "name": "(Failed) Delete Non-existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404 for non-existent user\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response has correct structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('statusCode');",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.statusCode).to.eql(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/{{API_PREFIX}}/users/00000000-0000-0000-0000-000000000000",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "{{API_PREFIX}}",
                "users",
                "00000000-0000-0000-0000-000000000000"
              ]
            },
            "description": "Test error handling for deleting a non-existent user"
          },
          "response": []
        }
      ],
      "description": "Tests for User API endpoints"
    },
    {
      "name": "App",
      "item": [
        {
          "name": "Site Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is 'OK'\", function () {",
                  "    pm.expect(pm.response.text()).to.equal('OK');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/site-health",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "site-health"
              ]
            },
            "description": "Health check endpoint to verify API is running"
          },
          "response": []
        },
        {
          "name": "Random Number",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains a number\", function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.not.be.empty;",
                  "    ",
                  "    const parsedNumber = parseFloat(responseText);",
                  "    pm.expect(parsedNumber).to.be.a('number');",
                  "    pm.expect(isNaN(parsedNumber)).to.be.false;",
                  "});",
                  "",
                  "pm.test(\"Random number is between 0 and 1\", function () {",
                  "    const parsedNumber = parseFloat(pm.response.text());",
                  "    pm.expect(parsedNumber).to.be.within(0, 1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{DOMAIN}}/random-number",
              "host": [
                "{{DOMAIN}}"
              ],
              "path": [
                "random-number"
              ]
            },
            "description": "Get a random number between 0 and 1"
          },
          "response": []
        }
      ],
      "description": "Tests for App API endpoints"
    }
  ]
}